openapi: 3.0.0
info:
  version: "1.0.0"
  title: AccuMed OpenAPI
  contact:
    email: info@accumedintel.com
tags:
  - name: Package
  - name: Request
  - name: Organization
  - name: User
  - name: Patient
paths:
  /package:
    get:
      tags:
      - Package
      summary: Get list of all packages
      operationId: getPackage
      responses:
        '200':
          description: Packages found
          content:
            application/json:
              schema:
                type: object
                properties:
                  Packages:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Package'
                        - $ref: '#/components/schemas/Link'
                  _links:
                    $ref: '#/components/schemas/PageLink'
                  _meta:
                    $ref: '#/components/schemas/Meta'
        '204':
          description: No packages found
    post:
      tags:
      - Package
      summary: Create new package
      operationId: createPackage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                parentPackageID:
                  type: integer
                packageTypeID:
                  type: integer
                bodyPartID:
                  type: integer
                bodyPartSlug:
                  type: integer
                title:
                  type: string
                description:
                  type: string
                totalNationalValue:
                  type: integer
                employeeID:
                  type: integer
        required: true
      responses:
        '201':
          description: Package created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Package'
                  - $ref: '#/components/schemas/Link'
  # /package/default:
  #   get:
  #     tags:
  #     - Package
  #     summary: Get default package
  #     operationId: getDefaultPackage
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Package'
  /package/search:
    get:
      tags:
      - Package
      summary: Search packages
      operationId: searchPackage
      parameters:
      - name: search
        in: query
        description: Search string
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Packages found
          content:
            application/json:
              schema:
                type: object
                properties:
                  Packages:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Package'
                        - $ref: '#/components/schemas/Link'
                  _links:
                    $ref: '#/components/schemas/PageLink'
                  _meta:
                    $ref: '#/components/schemas/Meta'
        '204':
          description: No packages found
  /package/{id}:
    get:
      tags:
      - Package
      summary: Get package by ID
      operationId: getPackageByID
      parameters:
      - name: id
        in: path
        description: package ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Package found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Package'
                  - $ref: '#/components/schemas/Link'
        '204':
          description: No packages found
    delete:
      tags:
      - Package
      summary: Delete package by ID
      operationId: deletePackageByID
      parameters:
      - name: id
        in: path
        description: package ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Package deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                  message: Package deleted
  /package/{id}/{key}/{value}:
    patch:
      tags:
      - Package
      summary: Update package
      operationId: updatePackage
      parameters:
      - name: id
        in: path
        description: package ID
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: Property name
        required: true
        schema:
          type: string
      - name: value
        in: path
        description: Property value
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Package updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Package'
                  - $ref: '#/components/schemas/Link'
  /request:
    get:
      tags:
      - Request
      summary: Get list of all requests
      operationId: getRequest
      responses:
        '200':
          description: Requests found
          content:
            application/json:
              schema:
                type: object
                properties:
                  Requests:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Request'
                        - $ref: '#/components/schemas/Link'
                  _links:
                    $ref: '#/components/schemas/PageLink'
                  _meta:
                    $ref: '#/components/schemas/Meta'
        '204':
          description: No requests found
    post:
      tags:
      - Request
      summary: Create new request
      operationId: createRequest
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                discloseExpert:
                  type: boolean
                customHeader:
                  type: string
                notes:
                  type: string
                dueDate:
                  type: string
                promoCode:
                  type: string
                _embedded:
                  type: object
                  properties:
                    Type:
                      $ref: '#/components/schemas/TypeRequest'
                    Status:
                      $ref: '#/components/schemas/Status'
                    Report:
                      $ref: '#/components/schemas/Report'
                    Organization:
                      $ref: '#/components/schemas/Organization'
                    User:
                      $ref: '#/components/schemas/User'
                    Claim:
                      $ref: '#/components/schemas/Claim'
                    Attorney:
                      $ref: '#/components/schemas/Attorney'
                    Contact:
                      $ref: '#/components/schemas/Contact'
                    Patient:
                      $ref: '#/components/schemas/Patient'
                    Packages:
                      type: array
                      items:
                        $ref: '#/components/schemas/RequestPackage'
                    Bills:
                      type: array
                      items:
                        $ref: '#/components/schemas/Bill'
                    Pharmaceuticals:
                      type: array
                      items:
                        $ref: '#/components/schemas/Pharmaceutical'
                    Attachments:
                      type: array
                      items:
                        $ref: '#/components/schemas/Attachment'
                    Documents:
                      type: array
                      items:
                        $ref: '#/components/schemas/Document'
        required: true
      responses:
        '201':
          description: Request created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Request'
                  - $ref: '#/components/schemas/Link'
  /request/search:
    get:
      tags:
      - Request
      summary: Search requests
      operationId: searchRequest
      parameters:
      - name: search
        in: query
        description: Search string
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Requests found
          content:
            application/json:
              schema:
                type: object
                properties:
                  Requests:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Request'
                        - $ref: '#/components/schemas/Link'
                  _links:
                    $ref: '#/components/schemas/PageLink'
                  _meta:
                    $ref: '#/components/schemas/Meta'
        '204':
          description: No requests found
  /request/{id}:
    get:
      tags:
      - Request
      summary: Get request by ID
      operationId: getRequestByID
      parameters:
      - name: id
        in: path
        description: request ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Request found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Request'
                  - $ref: '#/components/schemas/Link'
        '204':
          description: No requests found
  /request/{id}/subscribe/{userid}:
    post:
      tags:
      - Request
      summary: Subscribe user to request
      operationId: subscribe
      parameters:
      - name: id
        in: path
        description: request ID
        required: true
      - name: userid
        in: path
        description: user ID
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Subscription created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestSubscription'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                  message: Subscription already exists
  /request/{id}/unsubscribe/{userid}:
    post:
      tags:
      - Request
      summary: Unsubscribe user from request
      operationId: unubscribe
      parameters:
      - name: id
        in: path
        description: request ID
        required: true
      - name: userid
        in: path
        description: user ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Subscription cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                  message: Subscription cancelled
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                  message: Subscription not found
  # /request/default:
  #   get:
  #     tags:
  #     - Request
  #     summary: Get default request
  #     operationId: getDefaultRequest
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Request'
  # /request/{id}/{key}/{value}:
  #   patch:
  #     tags:
  #     - Request
  #     summary: Update request
  #     operationId: updateRequest
  #     parameters:
  #     - name: id
  #       in: path
  #       description: request ID
  #       required: true
  #       schema:
  #         type: string
  #     - name: key
  #       in: path
  #       description: Property name
  #       required: true
  #       schema:
  #         type: string
  #     - name: value
  #       in: path
  #       description: Property value
  #       required: true
  #       schema:
  #         type: string
  #     responses:
  #       '200':
  #         description: Request updated
  #         content:
  #           application/json:
  #             schema:
  #               allOf:
  #                 - $ref: '#/components/schemas/Request'
  #                 - $ref: '#/components/schemas/Link'
  /request/attachment/{id}:
    get:
      tags:
      - Request
      summary: Get request attachment by attachment ID
      operationId: getRequestAttachmentByID
      parameters:
      - name: id
        in: path
        description: request attachment ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Attachment found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Attachment'
                  - $ref: '#/components/schemas/Link'
        '204':
          description: No attachments found
    post:
      tags:
      - Request
      summary: Upload new request attachment
      operationId: createRequestAttachment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                upload:
                  type: string
                  description: attachment file to upload
        required: true
      responses:
        '201':
          description: Attachment created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Attachment'
                  - $ref: '#/components/schemas/Link'
  /request/document/{id}:
    get:
      tags:
      - Request
      summary: Get request document by ID
      operationId: getRequestDocumentByID
      parameters:
      - name: id
        in: path
        description: request document ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Document found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Document'
                  - $ref: '#/components/schemas/Link'
        '204':
          description: No documents found
  /request/document/{id}/download:
    get:
      tags:
      - Request
      summary: Download request document by ID
      operationId: downloadRequestDocumentByID
      parameters:
      - name: id
        in: path
        description: request document ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Document found
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '204':
          description: No documents found
  /organization:
    get:
      tags:
      - Organization
      summary: Get list of all organizations
      operationId: getOrganization
      responses:
        '200':
          description: Organizations found
          content:
            application/json:
              schema:
                type: object
                properties:
                  Organizations:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Organization'
                        - $ref: '#/components/schemas/Link'
                  _links:
                    $ref: '#/components/schemas/PageLink'
                  _meta:
                    $ref: '#/components/schemas/Meta'
    post:
      tags:
      - Organization
      summary: Create new organization
      operationId: createOrganizations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                subPremises:
                  type: string
                city:
                  type: string
                state:
                  type: string
                zip:
                  type: string
        required: true
      responses:
        '201':
          description: Organization created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Organization'
                  - $ref: '#/components/schemas/Link'
  # /organization/default:
  #   get:
  #     tags:
  #     - Organization
  #     summary: Get default organization
  #     operationId: getDefaultOrganization
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Organization'
  /organization/search:
    get:
      tags:
      - Organization
      summary: Search organizations
      operationId: searchOrganization
      parameters:
      - name: search
        in: query
        description: Search string
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Organizations found
          content:
            application/json:
              schema:
                type: object
                properties:
                  Organizations:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Organization'
                        - $ref: '#/components/schemas/Link'
                  _links:
                    $ref: '#/components/schemas/PageLink'
                  _meta:
                    $ref: '#/components/schemas/Meta'
        '204':
          description: No organizations found
  /organization/{id}:
    get:
      tags:
      - Organization
      summary: Get organization by ID
      operationId: getOrganizationByID
      parameters:
      - name: id
        in: path
        description: organization ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Organization found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Organization'
                  - $ref: '#/components/schemas/Link'
        '204':
          description: No organizations found
    delete:
      tags:
      - Organization
      summary: Delete organization by ID
      operationId: deleteOrganizationByID
      parameters:
      - name: id
        in: path
        description: organization ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Organization deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                  message: Organization deleted
  /organization/{id}/{key}/{value}:
    patch:
      tags:
      - Organization
      summary: Update organization
      operationId: updateOrganization
      parameters:
      - name: id
        in: path
        description: organization ID
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: Property name
        required: true
        schema:
          type: string
      - name: value
        in: path
        description: Property value
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Organization updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Organization'
                  - $ref: '#/components/schemas/Link'
  /user:
    get:
      tags:
      - User
      summary: Get list of all users
      operationId: getUser
      responses:
        '200':
          description: Users found
          content:
            application/json:
              schema:
                type: object
                properties:
                  Users:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/User'
                        - $ref: '#/components/schemas/Link'
                  _links:
                    $ref: '#/components/schemas/PageLink'
                  _meta:
                    $ref: '#/components/schemas/Meta'
        '204':
          description: No users found
    post:
      tags:
      - User
      summary: Create new user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                lastName:
                  type: string
                firstName:
                  type: string
                email:
                  type: string
                directLine:
                  type: string
                directExtension:
                  type: string
                cellphone:
                  type: string
                phone:
                  type: string
        required: true
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/Link'
  # /user/default:
  #   get:
  #     tags:
  #     - User
  #     summary: Get default user
  #     operationId: getDefaultUser
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  /user/search:
    get:
      tags:
      - User
      summary: Search Users
      operationId: searchUser
      parameters:
      - name: search
        in: query
        description: Search string
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Users found
          content:
            application/json:
              schema:
                type: object
                properties:
                  Users:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/User'
                        - $ref: '#/components/schemas/Link'
                  _links:
                    $ref: '#/components/schemas/PageLink'
                  _meta:
                    $ref: '#/components/schemas/Meta'
        '204':
          description: No users found
  /user/{id}:
    get:
      tags:
      - User
      summary: Get user by ID
      operationId: getUserByID
      parameters:
      - name: id
        in: path
        description: user ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/Link'
        '204':
          description: No users found
    delete:
      tags:
      - User
      summary: Remove user from current organization by ID
      operationId: deleteUserByID
      parameters:
      - name: id
        in: path
        description: user ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: User removed from current organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                  message: User removed from your organization
  /user/{id}/{key}/{value}:
    patch:
      tags:
      - User
      summary: Update user
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: user ID
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: Property name
        required: true
        schema:
          type: string
      - name: value
        in: path
        description: Property value
        required: true
        schema:
          type: string
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/Link'
  /user/{id}/subscribe/{requestid}:
    post:
      tags:
      - User
      summary: Subscribe user to request
      operationId: subscribe
      parameters:
      - name: id
        in: path
        description: user ID
        required: true
      - name: requestid
        in: path
        description: request ID
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Subscription created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestSubscription'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                  message: Subscription already exists
  /user/{id}/unsubscribe/{requestid}:
    post:
      tags:
      - User
      summary: Unsubscribe user from request
      operationId: unubscribe
      parameters:
      - name: id
        in: path
        description: user ID
        required: true
      - name: userid
        in: path
        description: request ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Subscription cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                  message: Subscription cancelled
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                  message: Subscription not found
  /patient:
    get:
      tags:
      - Patient
      summary: Get list of all patients
      operationId: getPatient
      responses:
        '200':
          description: Patients found
          content:
            application/json:
              schema:
                type: object
                properties:
                  Patients:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Patient'
                        - $ref: '#/components/schemas/Link'
                  _links:
                    $ref: '#/components/schemas/PageLink'
                  _meta:
                    $ref: '#/components/schemas/Meta'
        '204':
          description: No patients found
    post:
      tags:
      - Patient
      summary: Create new patient
      operationId: createPatient
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                middleInitial:
                  type: string
                lastName:
                  type: string
                sex:
                  type: string
                address:
                  type: string
                subPremises:
                  type: string
                city:
                  type: string
                state:
                  type: string
                zip:
                  type: string
                country:
                  type: string
                dateOfBirth:
                  type: string
        required: true
      responses:
        '201':
          description: Patient created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Patient'
                  - $ref: '#/components/schemas/Link'
  # /patient/default:
  #   get:
  #     tags:
  #     - Patient
  #     summary: Get default patient
  #     operationId: getDefaultPatient
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Patient'
  /patient/search:
    get:
      tags:
      - Patient
      summary: Search Patients
      operationId: searchPatient
      parameters:
      - name: search
        in: query
        description: Search string
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Patients found
          content:
            application/json:
              schema:
                type: object
                properties:
                  Patients:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Patient'
                        - $ref: '#/components/schemas/Link'
                  _links:
                    $ref: '#/components/schemas/PageLink'
                  _meta:
                    $ref: '#/components/schemas/Meta'
        '204':
          description: No patients found
  /patient/{id}:
    get:
      tags:
      - Patient
      summary: Get patient by ID
      operationId: getPatientByID
      parameters:
      - name: id
        in: path
        description: patient ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Patient found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Patient'
                  - $ref: '#/components/schemas/Link'
        '204':
          description: No patients found
    delete:
      tags:
      - Patient
      summary: Delete patient by ID
      operationId: deletePatientByID
      parameters:
      - name: id
        in: path
        description: patient ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Patient deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                  message: Patient deleted
  /patient/{id}/{key}/{value}:
    patch:
      tags:
      - Patient
      summary: Update patient
      operationId: updatePatient
      parameters:
      - name: id
        in: path
        description: ID of patient
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: Property name
        required: true
        schema:
          type: string
      - name: value
        in: path
        description: Property value
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Patient updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Patient'
                  - $ref: '#/components/schemas/Link'
components:
  schemas:
    Package:
      type: object
      properties:
        packageID:
          type: integer
          example: 744
        parentPackageID:
          type: integer
          example: 743
        packageTypeID:
          type: integer
          example: null
        bodyPartID:
          type: integer
          example: 7
        bodyPartSlug:
          type: integer
          example: null
        title:
          type: string
          example: test
        description:
          type: string
          example: This is a surgical procedure to fuse one level
        totalNationalValue:
          type: integer
          example: 123456789
        employeeID:
          type: integer
          example: 29
        isPublished:
          type: integer
          example: 0
        isStackable:
          type: integer
          example: null
        isWorkersCompensation:
          type: integer
          example: 0
        isPersonalInjury:
          type: integer
          example: 0
        isFlaggedForReview:
          type: integer
          example: 1
        isExpress:
          type: integer
          example: null
        isDeleted:
          type: integer
          example: 0
        _created:
          type: string
          example: 1561475426
        _updated:
          type: string
          example: 1561475426
    Request:
      type: object
      properties:
        requestID:
          type: integer
        requestGUID:
          type: integer
        discloseExpert:
          type: boolean
        customHeader:
          type: string
        notes:
          type: string
        dueDate:
          type: string
        promoCode:
          type: string
        created:
          type: string
        lastUpdated:
          type: string
        isDownloaded:
          type: integer
        _embedded:
          type: object
          properties:
            Type:
              $ref: '#/components/schemas/TypeRequest'
            Status:
              $ref: '#/components/schemas/Status'
            Report:
              $ref: '#/components/schemas/Report'
            Organization:
              allOf:
                - $ref: '#/components/schemas/Organization'
                - $ref: '#/components/schemas/Link'
            User:
              allOf:
                - $ref: '#/components/schemas/User'
                - $ref: '#/components/schemas/Link'
            Claim:
              $ref: '#/components/schemas/Claim'
            Attorney:
              $ref: '#/components/schemas/Attorney'
            Contact:
              $ref: '#/components/schemas/Contact'
            Patient:
              allOf:
                - $ref: '#/components/schemas/Patient'
                - $ref: '#/components/schemas/Link'
            Packages:
              type: array
              items:
                $ref: '#/components/schemas/RequestPackage'
            Bills:
              type: array
              items:
                $ref: '#/components/schemas/Bill'
            Pharmaceuticals:
              type: array
              items:
                $ref: '#/components/schemas/Pharmaceutical'
            Attachments:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Attachment'
                  - $ref: '#/components/schemas/Link'
            Documents:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Document'
                  - $ref: '#/components/schemas/Link'
    TypeRequest:
      type: object
      properties:
        slug:
          type: string
        type:
          type: string
    TypeClaim:
      type: object
      properties:
        slug:
          type: string
        type:
          type: string
    TypeDocument:
      type: object
      properties:
        slug:
          type: string
        type:
          type: string
    Status:
      type: object
      properties:
        slug:
          type: string
        status:
          type: string
    Report:
      type: object
      properties:
        slug:
          type: string
        type:
          type: string
    Organization:
      type: object
      properties:
        organizationID:
          type: string
        organizationGUID:
          type: string
        name:
          type: string
        fullAddress:
          type: string
        address:
          type: string
        subPremises:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
    User:
      type: object
      properties:
        userID:
          type: string
        userGUID:
          type: string
        name:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        email:
          type: string
        phone:
          type: string
        directLine:
          type: string
        directExtension:
          type: string
        cellphone:
          type: string
        other:
          type: string
    Claim:
      type: object
      properties:
        reference:
          type: string
        caseNumber:
          type: string
        dateOfLoss:
          type: string
        dateOfDiscovery:
          type: string
        dateOfTrial:
          type: string
        _embedded:
          type: object
          properties:
            type:
              $ref: '#/components/schemas/TypeClaim'
    Attorney:
      type: array
      items:
        type: string
    Contact:
      type: object
      properties:
        contactID:
          type: string
        contactGUID:
          type: string
        name:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        directLine:
          type: string
        directExtension:
          type: string
        cellphone:
          type: string
        fax:
          type: string
    Patient:
      type: object
      properties:
        patientID:
          type: string
        patientGUID:
          type: string
        name:
          type: string
        firstName:
          type: string
        middleInitial:
          type: string
        lastName:
          type: string
        sex:
          type: string
        fullAddress:
          type: string
        address:
          type: string
        subPremises:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
        country:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        dateOfBirth:
          type: string
    RequestPackage:
      type: object
      properties:
        packageID:
          type: integer
        packageGUID:
          type: string
        link:
          type: integer
        title:
          type: string
        description:
          type: string
        quantity:
          type: number
        frequencyMultiplier:
          type: number
        frequency:
          type: integer
        duration:
          type: number
        period:
          type: number
        multiplier:
          type: number
        multiplierText:
          type: string
    Bill:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        quantity:
          type: integer
        packageID:
          type: integer
        linkToPackage:
          type: integer
        isIncluded:
          type: integer
        source:
          type: string
    Pharmaceutical:
      type: object
      properties:
        requestPharmaceuticalID:
          type: integer
        requestID:
          type: integer
        pharmaceuticalGUID:
          type: string
        quantity:
          type: number
        duration:
          type: number
        frequency:
          type: number
        period:
          type: number
    Attachment:
      type: object
      properties:
        requestAttachmentID:
          type: integer
        requestID:
          type: integer
        type:
          type: string
        name:
          type: string
        link:
          type: string
        description:
          type: string
    Document:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        link:
          type: string
        date:
          type: string
        mimeType:
          type: string
        _embedded:
          type: object
          properties:
            type:
              $ref: '#/components/schemas/TypeDocument'
    Link:
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
    PageLink:
      type: object
      properties:
        self:
          type: object
          properties:
            href:
              type: string
        first:
          type: object
          properties:
            href:
              type: string
        prev:
          type: object
          properties:
            href:
              type: string
        next:
          type: object
          properties:
            href:
              type: string
        last:
          type: object
          properties:
            href:
              type: string
    Meta:
      type: object
      properties:
        totalCount:
          type: integer
          example: 145
        pageCount:
          type: integer
          example: 11
        currentPage:
          type: integer
          example: 1
        perPage:
          type: integer
          example: 10
    RequestSubscription:
      type: object
      properties:
        requestID:
          type: integer
          example: 2318
        userID:
          type: integer
          example: 1104
        _links:
          type: object
          properties:
            Request:
              type: object
              properties:
                href:
                  type: string
                  example: http://openapi.accumedintel.com/request/2318
            User:
              type: object
              properties:
                href:
                  type: string
                  example: http://openapi.accumedintel.com/user/1104
    ResponseMessage:
      type: object
      properties:
        message:
          type: string
